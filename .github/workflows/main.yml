name: CI/CD Backend

on:
  push:
    branches: [ main ]         # déploie uniquement quand tu pushes sur main
  workflow_dispatch:            # permet aussi de déclencher à la main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write          # nécessaire pour pousser sur GHCR

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Build & Push image vers GHCR ----------
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (owner/repo en minuscules)
        run: |
          OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/slapit-backend"
          echo "Image: $IMAGE:latest"
          docker build -t "$IMAGE:latest" ./backend
          docker push "$IMAGE:latest"

      # ---------- Déploiement: rsync des fichiers puis compose ----------
      - name: Add VPS to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Sync repo to VPS (rsync)
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -az --delete
          path: ./
          remote_path: /home/${{ secrets.VPS_USER }}/apps/slapit
          remote_host: ${{ secrets.VPS_HOST }}
          remote_user: ${{ secrets.VPS_USER }}
          remote_key: ${{ secrets.VPS_SSH_KEY }}

      - name: Compose pull & up
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            APP_DIR="/home/${{ secrets.VPS_USER }}/apps/slapit"
            cd "$APP_DIR"

            # Assure l’image GHCR correcte dans docker-compose.yml
            OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            sed -i "s|image: .*slapit-backend.*|image: ghcr.io/${OWNER_LC}/slapit-backend:latest|g" docker-compose.yml || true

            # Crée backend/.env si manquant (injecte depuis Secrets GitHub)
            mkdir -p backend
            if [ ! -f backend/.env ]; then
              cat > backend/.env << 'EOF'
              SUPABASE_URL=${{ secrets.SUPABASE_URL }}
              SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
              ENV=production
              EOF
            fi

            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
