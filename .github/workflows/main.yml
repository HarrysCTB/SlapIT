name: CI/CD Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---- Build & Push image to GHCR ----
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker image
        run: |
          OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          # GITHUB_REPOSITORY = Owner/Repo â†’ on ne garde que le nom puis on minuscule
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          REPO_LC=$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]')

          IMAGE="ghcr.io/${OWNER_LC}/${REPO_LC}/slapit-backend"
          echo "Using image: $IMAGE:latest"

          docker build -t "$IMAGE:latest" ./backend
          docker push "$IMAGE:latest"

      # ---- Deploy on VPS via SSH ----
      - name: Add VPS to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on VPS (rsync + compose)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd ~/apps/slapit

            if [ ! -d .git ]; then
              git clone https://github.com/${GITHUB_REPOSITORY} .
            else
              git fetch origin main && git reset --hard origin/main
            fi

            OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            REPO_LC=$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]')
            IMAGE_LINE="image: ghcr.io/${OWNER_LC}/${REPO_LC}/slapit-backend:latest"
            
            sed -i "s|^\\s*image: .*slapit-backend.*|  ${IMAGE_LINE}|g" docker-compose.yml || true

            # crÃ©e backend/.env si absent (utilise tes secrets)
            mkdir -p backend
            if [ ! -f backend/.env ]; then
              cat > backend/.env << 'EOF'
              SUPABASE_URL=${{ secrets.SUPABASE_URL }}
              SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
              ENV=production
              EOF
            fi

            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
