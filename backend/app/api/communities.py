from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from uuid import UUID
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.community import Community
from app.schemas.community import CommunityCreate, CommunityResponse
import uuid
from datetime import datetime, timezone
from supabase import Client
from typing import List
from postgrest import APIError
from fastapi.responses import JSONResponse

router = APIRouter()

class JoinRequest(BaseModel):
    user_id: UUID

@router.post("/", response_model=CommunityResponse)
def create_community(community: CommunityCreate, supabase: Client = Depends(get_db)):
    """
    Cr√©e une communaut√© et met √† jour :
    1. La table communities avec la nouvelle communaut√©
    2. La table user_communities pour le cr√©ateur
    3. La table profiles pour mettre √† jour le community_id et is_admin du cr√©ateur
    """
    community_id = str(uuid.uuid4())
    created_at = datetime.now(timezone.utc).isoformat()

    # Pr√©parer les donn√©es pour la communaut√©
    data = {
        "id": community_id,
        "name": community.name,
        "description": community.description,
        "admin_id": str(community.admin_id),
        "created_at": created_at
    }

    # Insertion dans la table communities
    response = supabase.table("communities").insert(data).execute()
    if not response.data:
        raise HTTPException(status_code=400, detail=f"Erreur lors de la cr√©ation de la communaut√©: {response}")

    # Insertion dans la table user_communities
    membership_data = {
        "user_id": str(community.admin_id),
        "community_id": community_id,
        "joined_at": created_at
    }
    mem_response = supabase.table("user_communities").insert(membership_data).execute()
    if not mem_response.data:
        raise HTTPException(status_code=400, detail="Communaut√© cr√©√©e mais erreur lors de l'ajout du membre")

    # Mise √† jour du profil de l'utilisateur avec le community_id et is_admin
    profile_response = supabase.table("profiles") \
        .update({
            "community_id": community_id,
            "is_admin": True
        }) \
        .eq("auth_id", str(community.admin_id)) \
        .execute()
    
    if not profile_response.data:
        raise HTTPException(
            status_code=400,
            detail="Erreur lors de la mise √† jour du profil administrateur"
        )

    return CommunityResponse(**data)

@router.post("/{community_id}/join")
def join_community(
    community_id: UUID,
    req: JoinRequest,
    supabase: Client = Depends(get_db),
):
    """
    Permet √† un utilisateur de rejoindre une communaut√©.
    - community_id : UUID dans le path
    - user_id : UUID dans le body JSON
    """
    user_id = str(req.user_id)
    community_id_str = str(community_id)

    data = {
        "user_id": user_id,
        "community_id": community_id_str,
        "joined_at": datetime.now(timezone.utc).isoformat(),
    }

    try:
        # üîπ 1. Ajout dans la table de relation
        supabase.table("user_communities").insert(data).execute()

        # üîπ 2. Update du profile pour stocker la communaut√© active
        supabase.table("profiles").update({"community_id": community_id_str}).eq("auth_id", user_id).execute()

    except APIError as e:
        raise HTTPException(status_code=400, detail=e.message or "Insert failed")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    return JSONResponse(status_code=200, content={"ok": True, "community_id": community_id_str})

@router.delete("/{community_id}/quit")
def quit_community(community_id: str, user_id: str, supabase: Client = Depends(get_db)):
    """
    Permet √† un utilisateur de quitter une communaut√© et met √† jour son profil.
    1. Supprime l'entr√©e dans user_communities
    2. Met √† jour le community_id du profil √† null
    """
    # Supprime l'utilisateur de la communaut√©
    response = supabase.table("user_communities") \
        .delete() \
        .eq("community_id", community_id) \
        .eq("user_id", user_id) \
        .execute()
        
    if not response.data:
        raise HTTPException(
            status_code=response.status_code,
            detail="Erreur lors de la suppression de l'utilisateur de la communaut√©"
        )

    # Met √† jour le profil de l'utilisateur (community_id √† null)
    profile_response = supabase.table("profiles") \
        .update({"community_id": None}) \
        .eq("auth_id", str(user_id)) \
        .execute()

    if not profile_response.data:
        raise HTTPException(
            status_code=400,
            detail="L'utilisateur a quitt√© la communaut√© mais erreur lors de la mise √† jour du profil"
        )

    return {"message": "Vous avez quitt√© la communaut√© avec succ√®s"}

@router.delete("/{community_id}/kick")
def kick_user(community_id: str, admin_id: str, user_id: str, supabase: Client = Depends(get_db)):
    """
    Permet √† l'administrateur d'une communaut√© d'expulser un utilisateur.
    1. V√©rifie les droits de l'admin
    2. Supprime l'utilisateur de la communaut√©
    3. Met √† jour le profil de l'utilisateur expuls√©
    """
    # V√©rifier que la communaut√© existe et r√©cup√©rer l'admin
    community_response = supabase.table("communities").select("admin_id").eq("id", community_id).execute()
    if not community_response.data:
        raise HTTPException(status_code=404, detail="Communaut√© introuvable")

    community_admin = community_response.data[0]["admin_id"]
    if str(community_admin) != str(admin_id):
        raise HTTPException(status_code=403, detail="Seul l'administrateur peut expulser un utilisateur")

    # Supprimer la relation utilisateur/communaut√©
    response = supabase.table("user_communities") \
        .delete() \
        .eq("community_id", community_id) \
        .eq("user_id", user_id) \
        .execute()

    if not response.data:
        raise HTTPException(
            status_code=response.status_code,
            detail="Erreur lors de l'expulsion de l'utilisateur"
        )

    # Mettre √† jour le profil de l'utilisateur expuls√©
    profile_response = supabase.table("profiles") \
        .update({"community_id": None}) \
        .eq("auth_id", str(user_id)) \
        .execute()

    if not profile_response.data:
        raise HTTPException(
            status_code=400,
            detail="L'utilisateur a √©t√© expuls√© mais erreur lors de la mise √† jour de son profil"
        )

    return {"message": "L'utilisateur a √©t√© expuls√© avec succ√®s"}


@router.get("/{community_id}/users")
def get_users_from_community(community_id: str, supabase: Client = Depends(get_db)):
    """
    R√©cup√®re tous les profils des utilisateurs d'une communaut√© sp√©cifique.
    Retourne une liste de profils.
    """
    try:
        # V√©rifie si la communaut√© existe
        community_response = supabase.table("communities") \
            .select("id") \
            .eq("id", community_id) \
            .execute()

        if not community_response.data:
            raise HTTPException(status_code=404, detail="Communaut√© introuvable")

        # R√©cup√®re les profils des utilisateurs dans cette communaut√©
        users_response = supabase.table("profiles") \
            .select("*") \
            .eq("community_id", community_id) \
            .execute()

        return { "community_users": users_response.data }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur : {str(e)}")